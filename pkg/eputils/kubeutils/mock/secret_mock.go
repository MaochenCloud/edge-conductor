//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ep/pkg/eputils/kubeutils (interfaces: SecretWrapper)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecretWrapper is a mock of SecretWrapper interface.
type MockSecretWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockSecretWrapperMockRecorder
}

// MockSecretWrapperMockRecorder is the mock recorder for MockSecretWrapper.
type MockSecretWrapperMockRecorder struct {
	mock *MockSecretWrapper
}

// NewMockSecretWrapper creates a new mock instance.
func NewMockSecretWrapper(ctrl *gomock.Controller) *MockSecretWrapper {
	mock := &MockSecretWrapper{ctrl: ctrl}
	mock.recorder = &MockSecretWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretWrapper) EXPECT() *MockSecretWrapperMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSecretWrapper) Get() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSecretWrapperMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretWrapper)(nil).Get))
}

// GetData mocks base method.
func (m *MockSecretWrapper) GetData() map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockSecretWrapperMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockSecretWrapper)(nil).GetData))
}

// GetStringData mocks base method.
func (m *MockSecretWrapper) GetStringData() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringData")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetStringData indicates an expected call of GetStringData.
func (mr *MockSecretWrapperMockRecorder) GetStringData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringData", reflect.TypeOf((*MockSecretWrapper)(nil).GetStringData))
}

// New mocks base method.
func (m *MockSecretWrapper) New() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(error)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockSecretWrapperMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockSecretWrapper)(nil).New))
}

// RenewData mocks base method.
func (m *MockSecretWrapper) RenewData(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewData indicates an expected call of RenewData.
func (mr *MockSecretWrapperMockRecorder) RenewData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewData", reflect.TypeOf((*MockSecretWrapper)(nil).RenewData), arg0, arg1)
}

// RenewStringData mocks base method.
func (m *MockSecretWrapper) RenewStringData(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewStringData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewStringData indicates an expected call of RenewStringData.
func (mr *MockSecretWrapperMockRecorder) RenewStringData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewStringData", reflect.TypeOf((*MockSecretWrapper)(nil).RenewStringData), arg0, arg1)
}

// Update mocks base method.
func (m *MockSecretWrapper) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSecretWrapperMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretWrapper)(nil).Update))
}
