//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ep/pkg/eputils/kubeutils (interfaces: ConfigMapWrapper)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfigMapWrapper is a mock of ConfigMapWrapper interface.
type MockConfigMapWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapWrapperMockRecorder
}

// MockConfigMapWrapperMockRecorder is the mock recorder for MockConfigMapWrapper.
type MockConfigMapWrapperMockRecorder struct {
	mock *MockConfigMapWrapper
}

// NewMockConfigMapWrapper creates a new mock instance.
func NewMockConfigMapWrapper(ctrl *gomock.Controller) *MockConfigMapWrapper {
	mock := &MockConfigMapWrapper{ctrl: ctrl}
	mock.recorder = &MockConfigMapWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigMapWrapper) EXPECT() *MockConfigMapWrapperMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConfigMapWrapper) Get() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockConfigMapWrapperMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigMapWrapper)(nil).Get))
}

// GetBinaryData mocks base method.
func (m *MockConfigMapWrapper) GetBinaryData() map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinaryData")
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetBinaryData indicates an expected call of GetBinaryData.
func (mr *MockConfigMapWrapperMockRecorder) GetBinaryData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinaryData", reflect.TypeOf((*MockConfigMapWrapper)(nil).GetBinaryData))
}

// GetData mocks base method.
func (m *MockConfigMapWrapper) GetData() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockConfigMapWrapperMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockConfigMapWrapper)(nil).GetData))
}

// New mocks base method.
func (m *MockConfigMapWrapper) New() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(error)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockConfigMapWrapperMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockConfigMapWrapper)(nil).New))
}

// RemoveBinaryData mocks base method.
func (m *MockConfigMapWrapper) RemoveBinaryData(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBinaryData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBinaryData indicates an expected call of RemoveBinaryData.
func (mr *MockConfigMapWrapperMockRecorder) RemoveBinaryData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBinaryData", reflect.TypeOf((*MockConfigMapWrapper)(nil).RemoveBinaryData), arg0)
}

// RemoveData mocks base method.
func (m *MockConfigMapWrapper) RemoveData(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveData indicates an expected call of RemoveData.
func (mr *MockConfigMapWrapperMockRecorder) RemoveData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveData", reflect.TypeOf((*MockConfigMapWrapper)(nil).RemoveData), arg0)
}

// RenewBinaryData mocks base method.
func (m *MockConfigMapWrapper) RenewBinaryData(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewBinaryData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewBinaryData indicates an expected call of RenewBinaryData.
func (mr *MockConfigMapWrapperMockRecorder) RenewBinaryData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewBinaryData", reflect.TypeOf((*MockConfigMapWrapper)(nil).RenewBinaryData), arg0, arg1)
}

// RenewData mocks base method.
func (m *MockConfigMapWrapper) RenewData(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewData indicates an expected call of RenewData.
func (mr *MockConfigMapWrapperMockRecorder) RenewData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewData", reflect.TypeOf((*MockConfigMapWrapper)(nil).RenewData), arg0, arg1)
}

// Update mocks base method.
func (m *MockConfigMapWrapper) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockConfigMapWrapperMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConfigMapWrapper)(nil).Update))
}
