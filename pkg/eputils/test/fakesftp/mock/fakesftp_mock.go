//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ep/pkg/eputils/test/fakesftp (interfaces: SftpClientInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sftp "github.com/pkg/sftp"
	ssh "golang.org/x/crypto/ssh"
)

// MockSftpClientInterface is a mock of SftpClientInterface interface.
type MockSftpClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSftpClientInterfaceMockRecorder
}

// MockSftpClientInterfaceMockRecorder is the mock recorder for MockSftpClientInterface.
type MockSftpClientInterfaceMockRecorder struct {
	mock *MockSftpClientInterface
}

// NewMockSftpClientInterface creates a new mock instance.
func NewMockSftpClientInterface(ctrl *gomock.Controller) *MockSftpClientInterface {
	mock := &MockSftpClientInterface{ctrl: ctrl}
	mock.recorder = &MockSftpClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSftpClientInterface) EXPECT() *MockSftpClientInterfaceMockRecorder {
	return m.recorder
}

// NewClient mocks base method.
func (m *MockSftpClientInterface) NewClient(arg0 *ssh.Client, arg1 ...sftp.ClientOption) (*sftp.Client, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewClient", varargs...)
	ret0, _ := ret[0].(*sftp.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClient indicates an expected call of NewClient.
func (mr *MockSftpClientInterfaceMockRecorder) NewClient(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockSftpClientInterface)(nil).NewClient), varargs...)
}
