//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ep/pkg/eputils (interfaces: ExecWrapper)

// Package mock is a generated GoMock package.
package mock

import (
	exec "os/exec"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExecWrapper is a mock of ExecWrapper interface.
type MockExecWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockExecWrapperMockRecorder
}

// MockExecWrapperMockRecorder is the mock recorder for MockExecWrapper.
type MockExecWrapperMockRecorder struct {
	mock *MockExecWrapper
}

// NewMockExecWrapper creates a new mock instance.
func NewMockExecWrapper(ctrl *gomock.Controller) *MockExecWrapper {
	mock := &MockExecWrapper{ctrl: ctrl}
	mock.recorder = &MockExecWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecWrapper) EXPECT() *MockExecWrapperMockRecorder {
	return m.recorder
}

// RunCMD mocks base method.
func (m *MockExecWrapper) RunCMD(arg0 *exec.Cmd) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCMD", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCMD indicates an expected call of RunCMD.
func (mr *MockExecWrapperMockRecorder) RunCMD(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCMD", reflect.TypeOf((*MockExecWrapper)(nil).RunCMD), arg0)
}

// RunCMDEx mocks base method.
func (m *MockExecWrapper) RunCMDEx(arg0 *exec.Cmd, arg1 bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCMDEx", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCMDEx indicates an expected call of RunCMDEx.
func (mr *MockExecWrapperMockRecorder) RunCMDEx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCMDEx", reflect.TypeOf((*MockExecWrapper)(nil).RunCMDEx), arg0, arg1)
}
