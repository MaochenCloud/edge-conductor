//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ep/pkg/eputils/docker (interfaces: DockerClientWrapperContainer,DockerClientWrapperImage,DockerClientInterface)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	plugins "ep/pkg/api/plugins"
	io "io"
	reflect "reflect"
	time "time"

	types "github.com/docker/docker/api/types"
	container "github.com/docker/docker/api/types/container"
	mount "github.com/docker/docker/api/types/mount"
	network "github.com/docker/docker/api/types/network"
	client "github.com/docker/docker/client"
	gomock "github.com/golang/mock/gomock"
)

// MockDockerClientWrapperContainer is a mock of DockerClientWrapperContainer interface.
type MockDockerClientWrapperContainer struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientWrapperContainerMockRecorder
}

// MockDockerClientWrapperContainerMockRecorder is the mock recorder for MockDockerClientWrapperContainer.
type MockDockerClientWrapperContainerMockRecorder struct {
	mock *MockDockerClientWrapperContainer
}

// NewMockDockerClientWrapperContainer creates a new mock instance.
func NewMockDockerClientWrapperContainer(ctrl *gomock.Controller) *MockDockerClientWrapperContainer {
	mock := &MockDockerClientWrapperContainer{ctrl: ctrl}
	mock.recorder = &MockDockerClientWrapperContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerClientWrapperContainer) EXPECT() *MockDockerClientWrapperContainerMockRecorder {
	return m.recorder
}

// CreateContainer mocks base method.
func (m *MockDockerClientWrapperContainer) CreateContainer(arg0, arg1, arg2, arg3 string, arg4 []string, arg5 string, arg6, arg7, arg8, arg9 bool, arg10, arg11, arg12 []string, arg13 []mount.Mount, arg14 map[string]struct{}, arg15, arg16, arg17, arg18 []string, arg19 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockDockerClientWrapperContainerMockRecorder) CreateContainer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockDockerClientWrapperContainer)(nil).CreateContainer), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
}

// GetContainerByName mocks base method.
func (m *MockDockerClientWrapperContainer) GetContainerByName(arg0 string) (*types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerByName", arg0)
	ret0, _ := ret[0].(*types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerByName indicates an expected call of GetContainerByName.
func (mr *MockDockerClientWrapperContainerMockRecorder) GetContainerByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerByName", reflect.TypeOf((*MockDockerClientWrapperContainer)(nil).GetContainerByName), arg0)
}

// RemoveContainer mocks base method.
func (m *MockDockerClientWrapperContainer) RemoveContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainer indicates an expected call of RemoveContainer.
func (mr *MockDockerClientWrapperContainerMockRecorder) RemoveContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainer", reflect.TypeOf((*MockDockerClientWrapperContainer)(nil).RemoveContainer), arg0)
}

// RunContainer mocks base method.
func (m *MockDockerClientWrapperContainer) RunContainer(arg0, arg1, arg2, arg3 string, arg4 []string, arg5 string, arg6, arg7, arg8, arg9 bool, arg10, arg11, arg12 []string, arg13 []mount.Mount, arg14 map[string]struct{}, arg15, arg16, arg17, arg18 []string, arg19 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunContainer", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunContainer indicates an expected call of RunContainer.
func (mr *MockDockerClientWrapperContainerMockRecorder) RunContainer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunContainer", reflect.TypeOf((*MockDockerClientWrapperContainer)(nil).RunContainer), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
}

// StartContainer mocks base method.
func (m *MockDockerClientWrapperContainer) StartContainer(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockDockerClientWrapperContainerMockRecorder) StartContainer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockDockerClientWrapperContainer)(nil).StartContainer), arg0, arg1, arg2)
}

// StopContainer mocks base method.
func (m *MockDockerClientWrapperContainer) StopContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockDockerClientWrapperContainerMockRecorder) StopContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockDockerClientWrapperContainer)(nil).StopContainer), arg0)
}

// MockDockerClientWrapperImage is a mock of DockerClientWrapperImage interface.
type MockDockerClientWrapperImage struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientWrapperImageMockRecorder
}

// MockDockerClientWrapperImageMockRecorder is the mock recorder for MockDockerClientWrapperImage.
type MockDockerClientWrapperImageMockRecorder struct {
	mock *MockDockerClientWrapperImage
}

// NewMockDockerClientWrapperImage creates a new mock instance.
func NewMockDockerClientWrapperImage(ctrl *gomock.Controller) *MockDockerClientWrapperImage {
	mock := &MockDockerClientWrapperImage{ctrl: ctrl}
	mock.recorder = &MockDockerClientWrapperImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerClientWrapperImage) EXPECT() *MockDockerClientWrapperImageMockRecorder {
	return m.recorder
}

// GetAuthConf mocks base method.
func (m *MockDockerClientWrapperImage) GetAuthConf(arg0, arg1, arg2, arg3 string) (*types.AuthConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthConf", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.AuthConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthConf indicates an expected call of GetAuthConf.
func (mr *MockDockerClientWrapperImageMockRecorder) GetAuthConf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthConf", reflect.TypeOf((*MockDockerClientWrapperImage)(nil).GetAuthConf), arg0, arg1, arg2, arg3)
}

// GetImageNewTag mocks base method.
func (m *MockDockerClientWrapperImage) GetImageNewTag(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageNewTag", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetImageNewTag indicates an expected call of GetImageNewTag.
func (mr *MockDockerClientWrapperImageMockRecorder) GetImageNewTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageNewTag", reflect.TypeOf((*MockDockerClientWrapperImage)(nil).GetImageNewTag), arg0, arg1)
}

// ImageBuild mocks base method.
func (m *MockDockerClientWrapperImage) ImageBuild(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageBuild", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageBuild indicates an expected call of ImageBuild.
func (mr *MockDockerClientWrapperImageMockRecorder) ImageBuild(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageBuild", reflect.TypeOf((*MockDockerClientWrapperImage)(nil).ImageBuild), arg0, arg1, arg2)
}

// ImageLoad mocks base method.
func (m *MockDockerClientWrapperImage) ImageLoad(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageLoad", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageLoad indicates an expected call of ImageLoad.
func (mr *MockDockerClientWrapperImageMockRecorder) ImageLoad(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageLoad", reflect.TypeOf((*MockDockerClientWrapperImage)(nil).ImageLoad), arg0)
}

// ImagePull mocks base method.
func (m *MockDockerClientWrapperImage) ImagePull(arg0 string, arg1 *types.AuthConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagePull", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImagePull indicates an expected call of ImagePull.
func (mr *MockDockerClientWrapperImageMockRecorder) ImagePull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagePull", reflect.TypeOf((*MockDockerClientWrapperImage)(nil).ImagePull), arg0, arg1)
}

// ImagePush mocks base method.
func (m *MockDockerClientWrapperImage) ImagePush(arg0 string, arg1 *types.AuthConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagePush", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImagePush indicates an expected call of ImagePush.
func (mr *MockDockerClientWrapperImageMockRecorder) ImagePush(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagePush", reflect.TypeOf((*MockDockerClientWrapperImage)(nil).ImagePush), arg0, arg1)
}

// ImagePushToRegistry mocks base method.
func (m *MockDockerClientWrapperImage) ImagePushToRegistry(arg0, arg1 string, arg2 *plugins.Customconfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagePushToRegistry", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImagePushToRegistry indicates an expected call of ImagePushToRegistry.
func (mr *MockDockerClientWrapperImageMockRecorder) ImagePushToRegistry(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagePushToRegistry", reflect.TypeOf((*MockDockerClientWrapperImage)(nil).ImagePushToRegistry), arg0, arg1, arg2)
}

// TagImage mocks base method.
func (m *MockDockerClientWrapperImage) TagImage(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagImage indicates an expected call of TagImage.
func (mr *MockDockerClientWrapperImageMockRecorder) TagImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagImage", reflect.TypeOf((*MockDockerClientWrapperImage)(nil).TagImage), arg0, arg1)
}

// TagImageToLocal mocks base method.
func (m *MockDockerClientWrapperImage) TagImageToLocal(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagImageToLocal", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagImageToLocal indicates an expected call of TagImageToLocal.
func (mr *MockDockerClientWrapperImageMockRecorder) TagImageToLocal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagImageToLocal", reflect.TypeOf((*MockDockerClientWrapperImage)(nil).TagImageToLocal), arg0, arg1)
}

// MockDockerClientInterface is a mock of DockerClientInterface interface.
type MockDockerClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientInterfaceMockRecorder
}

// MockDockerClientInterfaceMockRecorder is the mock recorder for MockDockerClientInterface.
type MockDockerClientInterfaceMockRecorder struct {
	mock *MockDockerClientInterface
}

// NewMockDockerClientInterface creates a new mock instance.
func NewMockDockerClientInterface(ctrl *gomock.Controller) *MockDockerClientInterface {
	mock := &MockDockerClientInterface{ctrl: ctrl}
	mock.recorder = &MockDockerClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerClientInterface) EXPECT() *MockDockerClientInterfaceMockRecorder {
	return m.recorder
}

// ContainerCreate mocks base method.
func (m *MockDockerClientInterface) ContainerCreate(arg0 *client.Client, arg1 context.Context, arg2 *container.Config, arg3 *container.HostConfig, arg4 *network.NetworkingConfig, arg5 string) (container.ContainerCreateCreatedBody, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerCreate", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(container.ContainerCreateCreatedBody)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerCreate indicates an expected call of ContainerCreate.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerCreate(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerCreate), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ContainerInspect mocks base method.
func (m *MockDockerClientInterface) ContainerInspect(arg0 *client.Client, arg1 context.Context, arg2 string) (types.ContainerJSON, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerInspect", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.ContainerJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerInspect indicates an expected call of ContainerInspect.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerInspect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerInspect", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerInspect), arg0, arg1, arg2)
}

// ContainerList mocks base method.
func (m *MockDockerClientInterface) ContainerList(arg0 *client.Client, arg1 context.Context, arg2 types.ContainerListOptions) ([]types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerList", arg0, arg1, arg2)
	ret0, _ := ret[0].([]types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerList indicates an expected call of ContainerList.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerList", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerList), arg0, arg1, arg2)
}

// ContainerLogs mocks base method.
func (m *MockDockerClientInterface) ContainerLogs(arg0 *client.Client, arg1 context.Context, arg2 string, arg3 types.ContainerLogsOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerLogs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerLogs indicates an expected call of ContainerLogs.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerLogs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerLogs", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerLogs), arg0, arg1, arg2, arg3)
}

// ContainerRemove mocks base method.
func (m *MockDockerClientInterface) ContainerRemove(arg0 *client.Client, arg1 context.Context, arg2 string, arg3 types.ContainerRemoveOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerRemove", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerRemove indicates an expected call of ContainerRemove.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerRemove(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRemove", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerRemove), arg0, arg1, arg2, arg3)
}

// ContainerStart mocks base method.
func (m *MockDockerClientInterface) ContainerStart(arg0 *client.Client, arg1 context.Context, arg2 string, arg3 types.ContainerStartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStart", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStart indicates an expected call of ContainerStart.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerStart(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStart", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerStart), arg0, arg1, arg2, arg3)
}

// ContainerStop mocks base method.
func (m *MockDockerClientInterface) ContainerStop(arg0 *client.Client, arg1 context.Context, arg2 string, arg3 *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStop", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ContainerStop indicates an expected call of ContainerStop.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerStop(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStop", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerStop), arg0, arg1, arg2, arg3)
}

// ImageBuild mocks base method.
func (m *MockDockerClientInterface) ImageBuild(arg0 *client.Client, arg1 context.Context, arg2 io.Reader, arg3 types.ImageBuildOptions) (types.ImageBuildResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageBuild", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.ImageBuildResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageBuild indicates an expected call of ImageBuild.
func (mr *MockDockerClientInterfaceMockRecorder) ImageBuild(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageBuild", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageBuild), arg0, arg1, arg2, arg3)
}

// ImageInspectWithRaw mocks base method.
func (m *MockDockerClientInterface) ImageInspectWithRaw(arg0 *client.Client, arg1 context.Context, arg2 string) (types.ImageInspect, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageInspectWithRaw", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.ImageInspect)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImageInspectWithRaw indicates an expected call of ImageInspectWithRaw.
func (mr *MockDockerClientInterfaceMockRecorder) ImageInspectWithRaw(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageInspectWithRaw", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageInspectWithRaw), arg0, arg1, arg2)
}

// ImageLoad mocks base method.
func (m *MockDockerClientInterface) ImageLoad(arg0 *client.Client, arg1 context.Context, arg2 io.Reader, arg3 bool) (types.ImageLoadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageLoad", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.ImageLoadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageLoad indicates an expected call of ImageLoad.
func (mr *MockDockerClientInterfaceMockRecorder) ImageLoad(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageLoad", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageLoad), arg0, arg1, arg2, arg3)
}

// ImagePull mocks base method.
func (m *MockDockerClientInterface) ImagePull(arg0 *client.Client, arg1 context.Context, arg2 string, arg3 types.ImagePullOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagePull", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImagePull indicates an expected call of ImagePull.
func (mr *MockDockerClientInterfaceMockRecorder) ImagePull(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagePull", reflect.TypeOf((*MockDockerClientInterface)(nil).ImagePull), arg0, arg1, arg2, arg3)
}

// ImagePush mocks base method.
func (m *MockDockerClientInterface) ImagePush(arg0 *client.Client, arg1 context.Context, arg2 string, arg3 types.ImagePushOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImagePush", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImagePush indicates an expected call of ImagePush.
func (mr *MockDockerClientInterfaceMockRecorder) ImagePush(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImagePush", reflect.TypeOf((*MockDockerClientInterface)(nil).ImagePush), arg0, arg1, arg2, arg3)
}

// ImageTag mocks base method.
func (m *MockDockerClientInterface) ImageTag(arg0 *client.Client, arg1 context.Context, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageTag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageTag indicates an expected call of ImageTag.
func (mr *MockDockerClientInterfaceMockRecorder) ImageTag(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageTag", reflect.TypeOf((*MockDockerClientInterface)(nil).ImageTag), arg0, arg1, arg2, arg3)
}

// NetworkCreate mocks base method.
func (m *MockDockerClientInterface) NetworkCreate(arg0 *client.Client, arg1 context.Context, arg2 string, arg3 types.NetworkCreate) (types.NetworkCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkCreate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.NetworkCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkCreate indicates an expected call of NetworkCreate.
func (mr *MockDockerClientInterfaceMockRecorder) NetworkCreate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkCreate", reflect.TypeOf((*MockDockerClientInterface)(nil).NetworkCreate), arg0, arg1, arg2, arg3)
}

// NetworkInspect mocks base method.
func (m *MockDockerClientInterface) NetworkInspect(arg0 *client.Client, arg1 context.Context, arg2 string, arg3 types.NetworkInspectOptions) (types.NetworkResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkInspect", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(types.NetworkResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NetworkInspect indicates an expected call of NetworkInspect.
func (mr *MockDockerClientInterfaceMockRecorder) NetworkInspect(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkInspect", reflect.TypeOf((*MockDockerClientInterface)(nil).NetworkInspect), arg0, arg1, arg2, arg3)
}

// NewClientWithOpts mocks base method.
func (m *MockDockerClientInterface) NewClientWithOpts(arg0 ...client.Opt) (*client.Client, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewClientWithOpts", varargs...)
	ret0, _ := ret[0].(*client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClientWithOpts indicates an expected call of NewClientWithOpts.
func (mr *MockDockerClientInterfaceMockRecorder) NewClientWithOpts(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientWithOpts", reflect.TypeOf((*MockDockerClientInterface)(nil).NewClientWithOpts), arg0...)
}
