//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ep/pkg/eputils/restfulcli (interfaces: GoharborClientWrapper)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGoharborClientWrapper is a mock of GoharborClientWrapper interface.
type MockGoharborClientWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockGoharborClientWrapperMockRecorder
}

// MockGoharborClientWrapperMockRecorder is the mock recorder for MockGoharborClientWrapper.
type MockGoharborClientWrapperMockRecorder struct {
	mock *MockGoharborClientWrapper
}

// NewMockGoharborClientWrapper creates a new mock instance.
func NewMockGoharborClientWrapper(ctrl *gomock.Controller) *MockGoharborClientWrapper {
	mock := &MockGoharborClientWrapper{ctrl: ctrl}
	mock.recorder = &MockGoharborClientWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoharborClientWrapper) EXPECT() *MockGoharborClientWrapperMockRecorder {
	return m.recorder
}

// MapImageURLCreateHarborProject mocks base method.
func (m *MockGoharborClientWrapper) MapImageURLCreateHarborProject(arg0, arg1, arg2, arg3 string, arg4 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapImageURLCreateHarborProject", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapImageURLCreateHarborProject indicates an expected call of MapImageURLCreateHarborProject.
func (mr *MockGoharborClientWrapperMockRecorder) MapImageURLCreateHarborProject(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapImageURLCreateHarborProject", reflect.TypeOf((*MockGoharborClientWrapper)(nil).MapImageURLCreateHarborProject), arg0, arg1, arg2, arg3, arg4)
}

// RegistryCreateProject mocks base method.
func (m *MockGoharborClientWrapper) RegistryCreateProject(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryCreateProject", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistryCreateProject indicates an expected call of RegistryCreateProject.
func (mr *MockGoharborClientWrapperMockRecorder) RegistryCreateProject(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryCreateProject", reflect.TypeOf((*MockGoharborClientWrapper)(nil).RegistryCreateProject), arg0, arg1, arg2, arg3)
}

// RegistryProjectExists mocks base method.
func (m *MockGoharborClientWrapper) RegistryProjectExists(arg0, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryProjectExists", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegistryProjectExists indicates an expected call of RegistryProjectExists.
func (mr *MockGoharborClientWrapperMockRecorder) RegistryProjectExists(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryProjectExists", reflect.TypeOf((*MockGoharborClientWrapper)(nil).RegistryProjectExists), arg0, arg1, arg2, arg3)
}

// TlsBasicAuth mocks base method.
func (m *MockGoharborClientWrapper) TlsBasicAuth(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TlsBasicAuth", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// TlsBasicAuth indicates an expected call of TlsBasicAuth.
func (mr *MockGoharborClientWrapperMockRecorder) TlsBasicAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TlsBasicAuth", reflect.TypeOf((*MockGoharborClientWrapper)(nil).TlsBasicAuth), arg0, arg1)
}
