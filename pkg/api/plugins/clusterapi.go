// Code generated by go-swagger; DO NOT EDIT.

//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Clusterapi clusterapi
//
// swagger:model clusterapi
type Clusterapi struct {

	// baremetalhost cr
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	BaremetalhostCr string `json:"baremetalhost_cr,omitempty"`

	// cluster cr
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	ClusterCr string `json:"cluster_cr,omitempty"`

	// cluster name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	ClusterName string `json:"cluster_name,omitempty"`

	// cluster namespace
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	ClusterNamespace string `json:"cluster_namespace,omitempty"`

	// controlplane cr
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	ControlplaneCr string `json:"controlplane_cr,omitempty"`

	// worker cr
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	WorkerCr string `json:"worker_cr,omitempty"`
}

// Validate validates this clusterapi
func (m *Clusterapi) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaremetalhostCr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterCr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControlplaneCr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkerCr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Clusterapi) validateBaremetalhostCr(formats strfmt.Registry) error {
	if swag.IsZero(m.BaremetalhostCr) { // not required
		return nil
	}

	if err := validate.Pattern("baremetalhost_cr", "body", m.BaremetalhostCr, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *Clusterapi) validateClusterCr(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterCr) { // not required
		return nil
	}

	if err := validate.Pattern("cluster_cr", "body", m.ClusterCr, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *Clusterapi) validateClusterName(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterName) { // not required
		return nil
	}

	if err := validate.Pattern("cluster_name", "body", m.ClusterName, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Clusterapi) validateClusterNamespace(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterNamespace) { // not required
		return nil
	}

	if err := validate.Pattern("cluster_namespace", "body", m.ClusterNamespace, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Clusterapi) validateControlplaneCr(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlplaneCr) { // not required
		return nil
	}

	if err := validate.Pattern("controlplane_cr", "body", m.ControlplaneCr, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *Clusterapi) validateWorkerCr(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkerCr) { // not required
		return nil
	}

	if err := validate.Pattern("worker_cr", "body", m.WorkerCr, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this clusterapi based on context it is used
func (m *Clusterapi) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Clusterapi) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Clusterapi) UnmarshalBinary(b []byte) error {
	var res Clusterapi
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
