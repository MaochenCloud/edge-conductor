// Code generated by go-swagger; DO NOT EDIT.

//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Osprovidermanifest osprovidermanifest
//
// swagger:model osprovidermanifest
type Osprovidermanifest struct {

	// esp
	Esp *OsprovidermanifestEsp `json:"esp,omitempty"`
}

// Validate validates this osprovidermanifest
func (m *Osprovidermanifest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEsp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Osprovidermanifest) validateEsp(formats strfmt.Registry) error {
	if swag.IsZero(m.Esp) { // not required
		return nil
	}

	if m.Esp != nil {
		if err := m.Esp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("esp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("esp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this osprovidermanifest based on the context it is used
func (m *Osprovidermanifest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEsp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Osprovidermanifest) contextValidateEsp(ctx context.Context, formats strfmt.Registry) error {

	if m.Esp != nil {
		if err := m.Esp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("esp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("esp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Osprovidermanifest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Osprovidermanifest) UnmarshalBinary(b []byte) error {
	var res Osprovidermanifest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OsprovidermanifestEsp osprovidermanifest esp
//
// swagger:model OsprovidermanifestEsp
type OsprovidermanifestEsp struct {

	// rel sha256
	RelSha256 string `json:"rel_sha256,omitempty"`

	// rel url
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	RelURL string `json:"rel_url,omitempty"`

	// rel version
	RelVersion string `json:"rel_version,omitempty"`
}

// Validate validates this osprovidermanifest esp
func (m *OsprovidermanifestEsp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OsprovidermanifestEsp) validateRelURL(formats strfmt.Registry) error {
	if swag.IsZero(m.RelURL) { // not required
		return nil
	}

	if err := validate.Pattern("esp"+"."+"rel_url", "body", m.RelURL, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this osprovidermanifest esp based on context it is used
func (m *OsprovidermanifestEsp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OsprovidermanifestEsp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OsprovidermanifestEsp) UnmarshalBinary(b []byte) error {
	var res OsprovidermanifestEsp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
