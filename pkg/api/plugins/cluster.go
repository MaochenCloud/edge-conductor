// Code generated by go-swagger; DO NOT EDIT.

//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Cluster cluster
//
// swagger:model cluster
type Cluster struct {

	// management cluster
	ManagementCluster *ClusterManagementCluster `json:"management_cluster,omitempty"`

	// namespace
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Namespace string `json:"namespace,omitempty"`

	// work cluster
	WorkCluster *ClusterWorkCluster `json:"work_cluster,omitempty"`
}

// Validate validates this cluster
func (m *Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManagementCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkCluster(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cluster) validateManagementCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.ManagementCluster) { // not required
		return nil
	}

	if m.ManagementCluster != nil {
		if err := m.ManagementCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) validateNamespace(formats strfmt.Registry) error {
	if swag.IsZero(m.Namespace) { // not required
		return nil
	}

	if err := validate.Pattern("namespace", "body", m.Namespace, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Cluster) validateWorkCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkCluster) { // not required
		return nil
	}

	if m.WorkCluster != nil {
		if err := m.WorkCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("work_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("work_cluster")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster based on the context it is used
func (m *Cluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManagementCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Cluster) contextValidateManagementCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.ManagementCluster != nil {
		if err := m.ManagementCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management_cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Cluster) contextValidateWorkCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkCluster != nil {
		if err := m.WorkCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("work_cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("work_cluster")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Cluster) UnmarshalBinary(b []byte) error {
	var res Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterManagementCluster cluster management cluster
//
// swagger:model ClusterManagementCluster
type ClusterManagementCluster struct {

	// capath
	// Pattern: ^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$
	Capath string `json:"capath,omitempty"`

	// endpoint
	Endpoint *ClusterManagementClusterEndpoint `json:"endpoint,omitempty"`
}

// Validate validates this cluster management cluster
func (m *ClusterManagementCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterManagementCluster) validateCapath(formats strfmt.Registry) error {
	if swag.IsZero(m.Capath) { // not required
		return nil
	}

	if err := validate.Pattern("management_cluster"+"."+"capath", "body", m.Capath, `^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ClusterManagementCluster) validateEndpoint(formats strfmt.Registry) error {
	if swag.IsZero(m.Endpoint) { // not required
		return nil
	}

	if m.Endpoint != nil {
		if err := m.Endpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management_cluster" + "." + "endpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management_cluster" + "." + "endpoint")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster management cluster based on the context it is used
func (m *ClusterManagementCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndpoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterManagementCluster) contextValidateEndpoint(ctx context.Context, formats strfmt.Registry) error {

	if m.Endpoint != nil {
		if err := m.Endpoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("management_cluster" + "." + "endpoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("management_cluster" + "." + "endpoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterManagementCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterManagementCluster) UnmarshalBinary(b []byte) error {
	var res ClusterManagementCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterManagementClusterEndpoint cluster management cluster endpoint
//
// swagger:model ClusterManagementClusterEndpoint
type ClusterManagementClusterEndpoint struct {

	// apiserver port
	// Pattern: ^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$
	ApiserverPort string `json:"apiserver_port,omitempty"`

	// ip
	// Pattern: (\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\b
	IP string `json:"ip,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// token
	Token string `json:"token,omitempty"`

	// user
	User string `json:"user,omitempty"`
}

// Validate validates this cluster management cluster endpoint
func (m *ClusterManagementClusterEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApiserverPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterManagementClusterEndpoint) validateApiserverPort(formats strfmt.Registry) error {
	if swag.IsZero(m.ApiserverPort) { // not required
		return nil
	}

	if err := validate.Pattern("management_cluster"+"."+"endpoint"+"."+"apiserver_port", "body", m.ApiserverPort, `^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$`); err != nil {
		return err
	}

	return nil
}

func (m *ClusterManagementClusterEndpoint) validateIP(formats strfmt.Registry) error {
	if swag.IsZero(m.IP) { // not required
		return nil
	}

	if err := validate.Pattern("management_cluster"+"."+"endpoint"+"."+"ip", "body", m.IP, `(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\b`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster management cluster endpoint based on context it is used
func (m *ClusterManagementClusterEndpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterManagementClusterEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterManagementClusterEndpoint) UnmarshalBinary(b []byte) error {
	var res ClusterManagementClusterEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClusterWorkCluster cluster work cluster
//
// swagger:model ClusterWorkCluster
type ClusterWorkCluster struct {

	// apiserver
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	Apiserver string `json:"apiserver,omitempty"`

	// cacerthash
	Cacerthash string `json:"cacerthash,omitempty"`

	// controller
	Controller *Node `json:"controller,omitempty"`

	// discoverytoken
	Discoverytoken string `json:"discoverytoken,omitempty"`

	// name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this cluster work cluster
func (m *ClusterWorkCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApiserver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterWorkCluster) validateApiserver(formats strfmt.Registry) error {
	if swag.IsZero(m.Apiserver) { // not required
		return nil
	}

	if err := validate.Pattern("work_cluster"+"."+"apiserver", "body", m.Apiserver, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *ClusterWorkCluster) validateController(formats strfmt.Registry) error {
	if swag.IsZero(m.Controller) { // not required
		return nil
	}

	if m.Controller != nil {
		if err := m.Controller.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("work_cluster" + "." + "controller")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("work_cluster" + "." + "controller")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterWorkCluster) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("work_cluster"+"."+"name", "body", m.Name, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cluster work cluster based on the context it is used
func (m *ClusterWorkCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateController(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterWorkCluster) contextValidateController(ctx context.Context, formats strfmt.Registry) error {

	if m.Controller != nil {
		if err := m.Controller.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("work_cluster" + "." + "controller")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("work_cluster" + "." + "controller")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterWorkCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterWorkCluster) UnmarshalBinary(b []byte) error {
	var res ClusterWorkCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
