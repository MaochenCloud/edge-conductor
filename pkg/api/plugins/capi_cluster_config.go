// Code generated by go-swagger; DO NOT EDIT.

//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CapiClusterConfig capi cluster config
//
// swagger:model capi-cluster-config
type CapiClusterConfig struct {

	// baremetel operator
	BaremetelOperator *CapiClusterConfigBaremetelOperator `json:"baremetel-operator,omitempty"`

	// byoh agent
	ByohAgent *CapiClusterConfigByohAgent `json:"byoh-agent,omitempty"`

	// workload cluster
	WorkloadCluster *CapiClusterConfigWorkloadCluster `json:"workload-cluster,omitempty"`
}

// Validate validates this capi cluster config
func (m *CapiClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaremetelOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByohAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadCluster(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapiClusterConfig) validateBaremetelOperator(formats strfmt.Registry) error {
	if swag.IsZero(m.BaremetelOperator) { // not required
		return nil
	}

	if m.BaremetelOperator != nil {
		if err := m.BaremetelOperator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baremetel-operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baremetel-operator")
			}
			return err
		}
	}

	return nil
}

func (m *CapiClusterConfig) validateByohAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.ByohAgent) { // not required
		return nil
	}

	if m.ByohAgent != nil {
		if err := m.ByohAgent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("byoh-agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("byoh-agent")
			}
			return err
		}
	}

	return nil
}

func (m *CapiClusterConfig) validateWorkloadCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkloadCluster) { // not required
		return nil
	}

	if m.WorkloadCluster != nil {
		if err := m.WorkloadCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workload-cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workload-cluster")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this capi cluster config based on the context it is used
func (m *CapiClusterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaremetelOperator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateByohAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkloadCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapiClusterConfig) contextValidateBaremetelOperator(ctx context.Context, formats strfmt.Registry) error {

	if m.BaremetelOperator != nil {
		if err := m.BaremetelOperator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baremetel-operator")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baremetel-operator")
			}
			return err
		}
	}

	return nil
}

func (m *CapiClusterConfig) contextValidateByohAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.ByohAgent != nil {
		if err := m.ByohAgent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("byoh-agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("byoh-agent")
			}
			return err
		}
	}

	return nil
}

func (m *CapiClusterConfig) contextValidateWorkloadCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.WorkloadCluster != nil {
		if err := m.WorkloadCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workload-cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workload-cluster")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CapiClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapiClusterConfig) UnmarshalBinary(b []byte) error {
	var res CapiClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CapiClusterConfigBaremetelOperator capi cluster config baremetel operator
//
// swagger:model CapiClusterConfigBaremetelOperator
type CapiClusterConfigBaremetelOperator struct {

	// bmhost
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	Bmhost string `json:"bmhost,omitempty"`

	// ironic containers
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	IronicContainers string `json:"ironic-containers,omitempty"`

	// url
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	URL string `json:"url,omitempty"`
}

// Validate validates this capi cluster config baremetel operator
func (m *CapiClusterConfigBaremetelOperator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBmhost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIronicContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapiClusterConfigBaremetelOperator) validateBmhost(formats strfmt.Registry) error {
	if swag.IsZero(m.Bmhost) { // not required
		return nil
	}

	if err := validate.Pattern("baremetel-operator"+"."+"bmhost", "body", m.Bmhost, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *CapiClusterConfigBaremetelOperator) validateIronicContainers(formats strfmt.Registry) error {
	if swag.IsZero(m.IronicContainers) { // not required
		return nil
	}

	if err := validate.Pattern("baremetel-operator"+"."+"ironic-containers", "body", m.IronicContainers, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *CapiClusterConfigBaremetelOperator) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.Pattern("baremetel-operator"+"."+"url", "body", m.URL, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this capi cluster config baremetel operator based on context it is used
func (m *CapiClusterConfigBaremetelOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CapiClusterConfigBaremetelOperator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapiClusterConfigBaremetelOperator) UnmarshalBinary(b []byte) error {
	var res CapiClusterConfigBaremetelOperator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CapiClusterConfigByohAgent capi cluster config byoh agent
//
// swagger:model CapiClusterConfigByohAgent
type CapiClusterConfigByohAgent struct {

	// init script
	InitScript string `json:"init-script,omitempty"`
}

// Validate validates this capi cluster config byoh agent
func (m *CapiClusterConfigByohAgent) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this capi cluster config byoh agent based on context it is used
func (m *CapiClusterConfigByohAgent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CapiClusterConfigByohAgent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapiClusterConfigByohAgent) UnmarshalBinary(b []byte) error {
	var res CapiClusterConfigByohAgent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CapiClusterConfigWorkloadCluster capi cluster config workload cluster
//
// swagger:model CapiClusterConfigWorkloadCluster
type CapiClusterConfigWorkloadCluster struct {

	// name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Name string `json:"name,omitempty"`

	// namespace
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Namespace string `json:"namespace,omitempty"`

	// url
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	URL string `json:"url,omitempty"`
}

// Validate validates this capi cluster config workload cluster
func (m *CapiClusterConfigWorkloadCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CapiClusterConfigWorkloadCluster) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("workload-cluster"+"."+"name", "body", m.Name, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CapiClusterConfigWorkloadCluster) validateNamespace(formats strfmt.Registry) error {
	if swag.IsZero(m.Namespace) { // not required
		return nil
	}

	if err := validate.Pattern("workload-cluster"+"."+"namespace", "body", m.Namespace, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CapiClusterConfigWorkloadCluster) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.Pattern("workload-cluster"+"."+"url", "body", m.URL, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this capi cluster config workload cluster based on context it is used
func (m *CapiClusterConfigWorkloadCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CapiClusterConfigWorkloadCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CapiClusterConfigWorkloadCluster) UnmarshalBinary(b []byte) error {
	var res CapiClusterConfigWorkloadCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
