// Code generated by go-swagger; DO NOT EDIT.

//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

package plugins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExecSimpleShell exec simple shell
//
// swagger:model exec-simple-shell
type ExecSimpleShell struct {

	// value
	Value *ExecSimpleShellValue `json:"Value,omitempty"`

	// spec
	Spec string `json:"spec,omitempty"`
}

// Validate validates this exec simple shell
func (m *ExecSimpleShell) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecSimpleShell) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	if m.Value != nil {
		if err := m.Value.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exec simple shell based on the context it is used
func (m *ExecSimpleShell) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecSimpleShell) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	if m.Value != nil {
		if err := m.Value.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecSimpleShell) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecSimpleShell) UnmarshalBinary(b []byte) error {
	var res ExecSimpleShell
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExecSimpleShellValue exec simple shell value
//
// swagger:model ExecSimpleShellValue
type ExecSimpleShellValue struct {

	// all of
	AllOf []string `json:"AllOf"`

	// any of
	AnyOf []string `json:"AnyOf"`

	// post copy to day0
	PostCopyToDay0 []*ExecSimpleShellValuePostCopyToDay0Items0 `json:"PostCopyToDay0"`

	// post push files
	PostPushFiles []*ExecSimpleShellValuePostPushFilesItems0 `json:"PostPushFiles"`

	// post push images
	PostPushImages []*ExecSimpleShellValuePostPushImagesItems0 `json:"PostPushImages"`

	// pre copy from day0
	PreCopyFromDay0 []*ExecSimpleShellValuePreCopyFromDay0Items0 `json:"PreCopyFromDay0"`

	// shell cmd
	ShellCmd []string `json:"ShellCmd"`
}

// Validate validates this exec simple shell value
func (m *ExecSimpleShellValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostCopyToDay0(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostPushFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostPushImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreCopyFromDay0(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecSimpleShellValue) validatePostCopyToDay0(formats strfmt.Registry) error {
	if swag.IsZero(m.PostCopyToDay0) { // not required
		return nil
	}

	for i := 0; i < len(m.PostCopyToDay0); i++ {
		if swag.IsZero(m.PostCopyToDay0[i]) { // not required
			continue
		}

		if m.PostCopyToDay0[i] != nil {
			if err := m.PostCopyToDay0[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Value" + "." + "PostCopyToDay0" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Value" + "." + "PostCopyToDay0" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecSimpleShellValue) validatePostPushFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.PostPushFiles) { // not required
		return nil
	}

	for i := 0; i < len(m.PostPushFiles); i++ {
		if swag.IsZero(m.PostPushFiles[i]) { // not required
			continue
		}

		if m.PostPushFiles[i] != nil {
			if err := m.PostPushFiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Value" + "." + "PostPushFiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Value" + "." + "PostPushFiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecSimpleShellValue) validatePostPushImages(formats strfmt.Registry) error {
	if swag.IsZero(m.PostPushImages) { // not required
		return nil
	}

	for i := 0; i < len(m.PostPushImages); i++ {
		if swag.IsZero(m.PostPushImages[i]) { // not required
			continue
		}

		if m.PostPushImages[i] != nil {
			if err := m.PostPushImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Value" + "." + "PostPushImages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Value" + "." + "PostPushImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecSimpleShellValue) validatePreCopyFromDay0(formats strfmt.Registry) error {
	if swag.IsZero(m.PreCopyFromDay0) { // not required
		return nil
	}

	for i := 0; i < len(m.PreCopyFromDay0); i++ {
		if swag.IsZero(m.PreCopyFromDay0[i]) { // not required
			continue
		}

		if m.PreCopyFromDay0[i] != nil {
			if err := m.PreCopyFromDay0[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Value" + "." + "PreCopyFromDay0" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Value" + "." + "PreCopyFromDay0" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this exec simple shell value based on the context it is used
func (m *ExecSimpleShellValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostCopyToDay0(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostPushFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostPushImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreCopyFromDay0(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExecSimpleShellValue) contextValidatePostCopyToDay0(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PostCopyToDay0); i++ {

		if m.PostCopyToDay0[i] != nil {
			if err := m.PostCopyToDay0[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Value" + "." + "PostCopyToDay0" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Value" + "." + "PostCopyToDay0" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecSimpleShellValue) contextValidatePostPushFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PostPushFiles); i++ {

		if m.PostPushFiles[i] != nil {
			if err := m.PostPushFiles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Value" + "." + "PostPushFiles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Value" + "." + "PostPushFiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecSimpleShellValue) contextValidatePostPushImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PostPushImages); i++ {

		if m.PostPushImages[i] != nil {
			if err := m.PostPushImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Value" + "." + "PostPushImages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Value" + "." + "PostPushImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExecSimpleShellValue) contextValidatePreCopyFromDay0(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreCopyFromDay0); i++ {

		if m.PreCopyFromDay0[i] != nil {
			if err := m.PreCopyFromDay0[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Value" + "." + "PreCopyFromDay0" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Value" + "." + "PreCopyFromDay0" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExecSimpleShellValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecSimpleShellValue) UnmarshalBinary(b []byte) error {
	var res ExecSimpleShellValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExecSimpleShellValuePostCopyToDay0Items0 exec simple shell value post copy to day0 items0
//
// swagger:model ExecSimpleShellValuePostCopyToDay0Items0
type ExecSimpleShellValuePostCopyToDay0Items0 struct {

	// from
	From string `json:"From,omitempty"`

	// to
	To string `json:"To,omitempty"`
}

// Validate validates this exec simple shell value post copy to day0 items0
func (m *ExecSimpleShellValuePostCopyToDay0Items0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this exec simple shell value post copy to day0 items0 based on context it is used
func (m *ExecSimpleShellValuePostCopyToDay0Items0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExecSimpleShellValuePostCopyToDay0Items0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecSimpleShellValuePostCopyToDay0Items0) UnmarshalBinary(b []byte) error {
	var res ExecSimpleShellValuePostCopyToDay0Items0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExecSimpleShellValuePostPushFilesItems0 exec simple shell value post push files items0
//
// swagger:model ExecSimpleShellValuePostPushFilesItems0
type ExecSimpleShellValuePostPushFilesItems0 struct {

	// from
	From string `json:"From,omitempty"`

	// to
	To string `json:"To,omitempty"`
}

// Validate validates this exec simple shell value post push files items0
func (m *ExecSimpleShellValuePostPushFilesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this exec simple shell value post push files items0 based on context it is used
func (m *ExecSimpleShellValuePostPushFilesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExecSimpleShellValuePostPushFilesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecSimpleShellValuePostPushFilesItems0) UnmarshalBinary(b []byte) error {
	var res ExecSimpleShellValuePostPushFilesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExecSimpleShellValuePostPushImagesItems0 exec simple shell value post push images items0
//
// swagger:model ExecSimpleShellValuePostPushImagesItems0
type ExecSimpleShellValuePostPushImagesItems0 struct {

	// from
	From string `json:"From,omitempty"`

	// to
	To string `json:"To,omitempty"`
}

// Validate validates this exec simple shell value post push images items0
func (m *ExecSimpleShellValuePostPushImagesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this exec simple shell value post push images items0 based on context it is used
func (m *ExecSimpleShellValuePostPushImagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExecSimpleShellValuePostPushImagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecSimpleShellValuePostPushImagesItems0) UnmarshalBinary(b []byte) error {
	var res ExecSimpleShellValuePostPushImagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExecSimpleShellValuePreCopyFromDay0Items0 exec simple shell value pre copy from day0 items0
//
// swagger:model ExecSimpleShellValuePreCopyFromDay0Items0
type ExecSimpleShellValuePreCopyFromDay0Items0 struct {

	// from
	From string `json:"From,omitempty"`

	// to
	To string `json:"To,omitempty"`
}

// Validate validates this exec simple shell value pre copy from day0 items0
func (m *ExecSimpleShellValuePreCopyFromDay0Items0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this exec simple shell value pre copy from day0 items0 based on context it is used
func (m *ExecSimpleShellValuePreCopyFromDay0Items0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExecSimpleShellValuePreCopyFromDay0Items0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExecSimpleShellValuePreCopyFromDay0Items0) UnmarshalBinary(b []byte) error {
	var res ExecSimpleShellValuePreCopyFromDay0Items0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
