// Code generated by go-swagger; DO NOT EDIT.

//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

package ep

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Customconfig customconfig
//
// swagger:model customconfig
type Customconfig struct {

	// cluster
	Cluster *Cluster `json:"cluster,omitempty"`

	// ironic
	Ironic *CustomconfigIronic `json:"ironic,omitempty"`

	// registry
	Registry *CustomconfigRegistry `json:"registry,omitempty"`

	// resources
	Resources []*CustomconfigResourcesItems0 `json:"resources"`
}

// Validate validates this customconfig
func (m *Customconfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIronic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customconfig) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Customconfig) validateIronic(formats strfmt.Registry) error {
	if swag.IsZero(m.Ironic) { // not required
		return nil
	}

	if m.Ironic != nil {
		if err := m.Ironic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ironic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ironic")
			}
			return err
		}
	}

	return nil
}

func (m *Customconfig) validateRegistry(formats strfmt.Registry) error {
	if swag.IsZero(m.Registry) { // not required
		return nil
	}

	if m.Registry != nil {
		if err := m.Registry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registry")
			}
			return err
		}
	}

	return nil
}

func (m *Customconfig) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this customconfig based on the context it is used
func (m *Customconfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIronic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Customconfig) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.Cluster != nil {
		if err := m.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *Customconfig) contextValidateIronic(ctx context.Context, formats strfmt.Registry) error {

	if m.Ironic != nil {
		if err := m.Ironic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ironic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ironic")
			}
			return err
		}
	}

	return nil
}

func (m *Customconfig) contextValidateRegistry(ctx context.Context, formats strfmt.Registry) error {

	if m.Registry != nil {
		if err := m.Registry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registry")
			}
			return err
		}
	}

	return nil
}

func (m *Customconfig) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {
			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Customconfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Customconfig) UnmarshalBinary(b []byte) error {
	var res Customconfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomconfigIronic customconfig ironic
//
// swagger:model CustomconfigIronic
type CustomconfigIronic struct {

	// dhcprange
	Dhcprange string `json:"dhcprange,omitempty"`

	// httpport
	// Pattern: ^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$
	Httpport string `json:"httpport,omitempty"`

	// ironicinspectorpassword
	Ironicinspectorpassword string `json:"ironicinspectorpassword,omitempty"`

	// ironicinspectoruser
	Ironicinspectoruser string `json:"ironicinspectoruser,omitempty"`

	// ironicpassword
	Ironicpassword string `json:"ironicpassword,omitempty"`

	// ironicuser
	Ironicuser string `json:"ironicuser,omitempty"`

	// kubeconfigpath
	// Pattern: ^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$
	Kubeconfigpath string `json:"kubeconfigpath,omitempty"`

	// mariadbpassword
	Mariadbpassword string `json:"mariadbpassword,omitempty"`

	// provisioninginterface
	Provisioninginterface string `json:"provisioninginterface,omitempty"`

	// provisioningip
	// Pattern: (\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\b
	Provisioningip string `json:"provisioningip,omitempty"`
}

// Validate validates this customconfig ironic
func (m *CustomconfigIronic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHttpport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeconfigpath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningip(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomconfigIronic) validateHttpport(formats strfmt.Registry) error {
	if swag.IsZero(m.Httpport) { // not required
		return nil
	}

	if err := validate.Pattern("ironic"+"."+"httpport", "body", m.Httpport, `^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomconfigIronic) validateKubeconfigpath(formats strfmt.Registry) error {
	if swag.IsZero(m.Kubeconfigpath) { // not required
		return nil
	}

	if err := validate.Pattern("ironic"+"."+"kubeconfigpath", "body", m.Kubeconfigpath, `^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomconfigIronic) validateProvisioningip(formats strfmt.Registry) error {
	if swag.IsZero(m.Provisioningip) { // not required
		return nil
	}

	if err := validate.Pattern("ironic"+"."+"provisioningip", "body", m.Provisioningip, `(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}\b`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this customconfig ironic based on context it is used
func (m *CustomconfigIronic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomconfigIronic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomconfigIronic) UnmarshalBinary(b []byte) error {
	var res CustomconfigIronic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomconfigRegistry customconfig registry
//
// swagger:model CustomconfigRegistry
type CustomconfigRegistry struct {

	// capath
	// Pattern: ^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$
	Capath string `json:"capath,omitempty"`

	// externalurl
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	Externalurl string `json:"externalurl,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// user
	User string `json:"user,omitempty"`
}

// Validate validates this customconfig registry
func (m *CustomconfigRegistry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalurl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomconfigRegistry) validateCapath(formats strfmt.Registry) error {
	if swag.IsZero(m.Capath) { // not required
		return nil
	}

	if err := validate.Pattern("registry"+"."+"capath", "body", m.Capath, `^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *CustomconfigRegistry) validateExternalurl(formats strfmt.Registry) error {
	if swag.IsZero(m.Externalurl) { // not required
		return nil
	}

	if err := validate.Pattern("registry"+"."+"externalurl", "body", m.Externalurl, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this customconfig registry based on context it is used
func (m *CustomconfigRegistry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomconfigRegistry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomconfigRegistry) UnmarshalBinary(b []byte) error {
	var res CustomconfigRegistry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CustomconfigResourcesItems0 customconfig resources items0
//
// swagger:model CustomconfigResourcesItems0
type CustomconfigResourcesItems0 struct {

	// name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Name string `json:"name,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this customconfig resources items0
func (m *CustomconfigResourcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomconfigResourcesItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this customconfig resources items0 based on context it is used
func (m *CustomconfigResourcesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomconfigResourcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomconfigResourcesItems0) UnmarshalBinary(b []byte) error {
	var res CustomconfigResourcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
