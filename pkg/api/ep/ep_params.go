// Code generated by go-swagger; DO NOT EDIT.

//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

package ep

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EpParams ep params
//
// swagger:model ep-params
type EpParams struct {

	// cmdline
	Cmdline string `json:"cmdline,omitempty"`

	// ekconfig
	Ekconfig *Ekconfig `json:"ekconfig,omitempty"`

	// ekconfigpath
	// Pattern: ^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$
	Ekconfigpath string `json:"ekconfigpath,omitempty"`

	// extensions
	Extensions []*EpParamsExtensionsItems0 `json:"extensions"`

	// kubeconfig
	// Pattern: ^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$
	Kubeconfig string `json:"kubeconfig,omitempty"`

	// registrycert
	Registrycert *Certificate `json:"registrycert,omitempty"`

	// runtimebin
	// Pattern: ^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$
	Runtimebin string `json:"runtimebin,omitempty"`

	// runtimedata
	// Pattern: ^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$
	Runtimedata string `json:"runtimedata,omitempty"`

	// runtimedir
	// Pattern: ^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$
	Runtimedir string `json:"runtimedir,omitempty"`

	// user
	User string `json:"user,omitempty"`

	// workspace
	// Pattern: ^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$
	Workspace string `json:"workspace,omitempty"`
}

// Validate validates this ep params
func (m *EpParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEkconfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEkconfigpath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubeconfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrycert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimebin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimedata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimedir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EpParams) validateEkconfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Ekconfig) { // not required
		return nil
	}

	if m.Ekconfig != nil {
		if err := m.Ekconfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ekconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ekconfig")
			}
			return err
		}
	}

	return nil
}

func (m *EpParams) validateEkconfigpath(formats strfmt.Registry) error {
	if swag.IsZero(m.Ekconfigpath) { // not required
		return nil
	}

	if err := validate.Pattern("ekconfigpath", "body", m.Ekconfigpath, `^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EpParams) validateExtensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	for i := 0; i < len(m.Extensions); i++ {
		if swag.IsZero(m.Extensions[i]) { // not required
			continue
		}

		if m.Extensions[i] != nil {
			if err := m.Extensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EpParams) validateKubeconfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Kubeconfig) { // not required
		return nil
	}

	if err := validate.Pattern("kubeconfig", "body", m.Kubeconfig, `^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EpParams) validateRegistrycert(formats strfmt.Registry) error {
	if swag.IsZero(m.Registrycert) { // not required
		return nil
	}

	if m.Registrycert != nil {
		if err := m.Registrycert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrycert")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registrycert")
			}
			return err
		}
	}

	return nil
}

func (m *EpParams) validateRuntimebin(formats strfmt.Registry) error {
	if swag.IsZero(m.Runtimebin) { // not required
		return nil
	}

	if err := validate.Pattern("runtimebin", "body", m.Runtimebin, `^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EpParams) validateRuntimedata(formats strfmt.Registry) error {
	if swag.IsZero(m.Runtimedata) { // not required
		return nil
	}

	if err := validate.Pattern("runtimedata", "body", m.Runtimedata, `^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EpParams) validateRuntimedir(formats strfmt.Registry) error {
	if swag.IsZero(m.Runtimedir) { // not required
		return nil
	}

	if err := validate.Pattern("runtimedir", "body", m.Runtimedir, `^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *EpParams) validateWorkspace(formats strfmt.Registry) error {
	if swag.IsZero(m.Workspace) { // not required
		return nil
	}

	if err := validate.Pattern("workspace", "body", m.Workspace, `^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ep params based on the context it is used
func (m *EpParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEkconfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrycert(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EpParams) contextValidateEkconfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Ekconfig != nil {
		if err := m.Ekconfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ekconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ekconfig")
			}
			return err
		}
	}

	return nil
}

func (m *EpParams) contextValidateExtensions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Extensions); i++ {

		if m.Extensions[i] != nil {
			if err := m.Extensions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EpParams) contextValidateRegistrycert(ctx context.Context, formats strfmt.Registry) error {

	if m.Registrycert != nil {
		if err := m.Registrycert.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrycert")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registrycert")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EpParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EpParams) UnmarshalBinary(b []byte) error {
	var res EpParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// EpParamsExtensionsItems0 ep params extensions items0
//
// swagger:model EpParamsExtensionsItems0
type EpParamsExtensionsItems0 struct {

	// extension
	Extension *Extension `json:"extension,omitempty"`

	// name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Name string `json:"name,omitempty"`
}

// Validate validates this ep params extensions items0
func (m *EpParamsExtensionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtension(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EpParamsExtensionsItems0) validateExtension(formats strfmt.Registry) error {
	if swag.IsZero(m.Extension) { // not required
		return nil
	}

	if m.Extension != nil {
		if err := m.Extension.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

func (m *EpParamsExtensionsItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ep params extensions items0 based on the context it is used
func (m *EpParamsExtensionsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtension(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EpParamsExtensionsItems0) contextValidateExtension(ctx context.Context, formats strfmt.Registry) error {

	if m.Extension != nil {
		if err := m.Extension.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extension")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extension")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EpParamsExtensionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EpParamsExtensionsItems0) UnmarshalBinary(b []byte) error {
	var res EpParamsExtensionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
