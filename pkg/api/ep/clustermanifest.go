// Code generated by go-swagger; DO NOT EDIT.

//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

package ep

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Clustermanifest clustermanifest
//
// swagger:model clustermanifest
type Clustermanifest struct {

	// cluster providers
	ClusterProviders []*ClustermanifestClusterProvidersItems0 `json:"cluster_providers"`

	// clusterapi
	Clusterapi *ClustermanifestClusterapi `json:"clusterapi,omitempty"`
}

// Validate validates this clustermanifest
func (m *Clustermanifest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterapi(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Clustermanifest) validateClusterProviders(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterProviders) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterProviders); i++ {
		if swag.IsZero(m.ClusterProviders[i]) { // not required
			continue
		}

		if m.ClusterProviders[i] != nil {
			if err := m.ClusterProviders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cluster_providers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cluster_providers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Clustermanifest) validateClusterapi(formats strfmt.Registry) error {
	if swag.IsZero(m.Clusterapi) { // not required
		return nil
	}

	if m.Clusterapi != nil {
		if err := m.Clusterapi.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterapi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterapi")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this clustermanifest based on the context it is used
func (m *Clustermanifest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterapi(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Clustermanifest) contextValidateClusterProviders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterProviders); i++ {

		if m.ClusterProviders[i] != nil {
			if err := m.ClusterProviders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cluster_providers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cluster_providers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Clustermanifest) contextValidateClusterapi(ctx context.Context, formats strfmt.Registry) error {

	if m.Clusterapi != nil {
		if err := m.Clusterapi.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterapi")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterapi")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Clustermanifest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Clustermanifest) UnmarshalBinary(b []byte) error {
	var res Clustermanifest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClustermanifestClusterProvidersItems0 clustermanifest cluster providers items0
//
// swagger:model ClustermanifestClusterProvidersItems0
type ClustermanifestClusterProvidersItems0 struct {

	// binaries
	Binaries []*ClustermanifestClusterProvidersItems0BinariesItems0 `json:"binaries"`

	// images
	Images []*ClustermanifestClusterProvidersItems0ImagesItems0 `json:"images"`

	// name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Name string `json:"name,omitempty"`

	// registrystorage
	// Pattern: ^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$
	Registrystorage string `json:"registrystorage,omitempty"`

	// resources
	Resources []*ClustermanifestClusterProvidersItems0ResourcesItems0 `json:"resources"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this clustermanifest cluster providers items0
func (m *ClustermanifestClusterProvidersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBinaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrystorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterProvidersItems0) validateBinaries(formats strfmt.Registry) error {
	if swag.IsZero(m.Binaries) { // not required
		return nil
	}

	for i := 0; i < len(m.Binaries); i++ {
		if swag.IsZero(m.Binaries[i]) { // not required
			continue
		}

		if m.Binaries[i] != nil {
			if err := m.Binaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("binaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("binaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClustermanifestClusterProvidersItems0) validateImages(formats strfmt.Registry) error {
	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {
		if swag.IsZero(m.Images[i]) { // not required
			continue
		}

		if m.Images[i] != nil {
			if err := m.Images[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClustermanifestClusterProvidersItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ClustermanifestClusterProvidersItems0) validateRegistrystorage(formats strfmt.Registry) error {
	if swag.IsZero(m.Registrystorage) { // not required
		return nil
	}

	if err := validate.Pattern("registrystorage", "body", m.Registrystorage, `^[a-zA-Z.\/][a-zA-Z0-9-_.\/]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ClustermanifestClusterProvidersItems0) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this clustermanifest cluster providers items0 based on the context it is used
func (m *ClustermanifestClusterProvidersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBinaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterProvidersItems0) contextValidateBinaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Binaries); i++ {

		if m.Binaries[i] != nil {
			if err := m.Binaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("binaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("binaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClustermanifestClusterProvidersItems0) contextValidateImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Images); i++ {

		if m.Images[i] != nil {
			if err := m.Images[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("images" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClustermanifestClusterProvidersItems0) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {
			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClustermanifestClusterProvidersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustermanifestClusterProvidersItems0) UnmarshalBinary(b []byte) error {
	var res ClustermanifestClusterProvidersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClustermanifestClusterProvidersItems0BinariesItems0 clustermanifest cluster providers items0 binaries items0
//
// swagger:model ClustermanifestClusterProvidersItems0BinariesItems0
type ClustermanifestClusterProvidersItems0BinariesItems0 struct {

	// name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Name string `json:"name,omitempty"`

	// sha256
	Sha256 string `json:"sha256,omitempty"`

	// url
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	URL string `json:"url,omitempty"`
}

// Validate validates this clustermanifest cluster providers items0 binaries items0
func (m *ClustermanifestClusterProvidersItems0BinariesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterProvidersItems0BinariesItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ClustermanifestClusterProvidersItems0BinariesItems0) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.Pattern("url", "body", m.URL, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this clustermanifest cluster providers items0 binaries items0 based on context it is used
func (m *ClustermanifestClusterProvidersItems0BinariesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClustermanifestClusterProvidersItems0BinariesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustermanifestClusterProvidersItems0BinariesItems0) UnmarshalBinary(b []byte) error {
	var res ClustermanifestClusterProvidersItems0BinariesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClustermanifestClusterProvidersItems0ImagesItems0 clustermanifest cluster providers items0 images items0
//
// swagger:model ClustermanifestClusterProvidersItems0ImagesItems0
type ClustermanifestClusterProvidersItems0ImagesItems0 struct {

	// name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Name string `json:"name,omitempty"`

	// repo tag
	RepoTag string `json:"repo_tag,omitempty"`
}

// Validate validates this clustermanifest cluster providers items0 images items0
func (m *ClustermanifestClusterProvidersItems0ImagesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterProvidersItems0ImagesItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this clustermanifest cluster providers items0 images items0 based on context it is used
func (m *ClustermanifestClusterProvidersItems0ImagesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClustermanifestClusterProvidersItems0ImagesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustermanifestClusterProvidersItems0ImagesItems0) UnmarshalBinary(b []byte) error {
	var res ClustermanifestClusterProvidersItems0ImagesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClustermanifestClusterProvidersItems0ResourcesItems0 clustermanifest cluster providers items0 resources items0
//
// swagger:model ClustermanifestClusterProvidersItems0ResourcesItems0
type ClustermanifestClusterProvidersItems0ResourcesItems0 struct {

	// name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Name string `json:"name,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this clustermanifest cluster providers items0 resources items0
func (m *ClustermanifestClusterProvidersItems0ResourcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterProvidersItems0ResourcesItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this clustermanifest cluster providers items0 resources items0 based on context it is used
func (m *ClustermanifestClusterProvidersItems0ResourcesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClustermanifestClusterProvidersItems0ResourcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustermanifestClusterProvidersItems0ResourcesItems0) UnmarshalBinary(b []byte) error {
	var res ClustermanifestClusterProvidersItems0ResourcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClustermanifestClusterapi clustermanifest clusterapi
//
// swagger:model ClustermanifestClusterapi
type ClustermanifestClusterapi struct {

	// byoh config
	ByohConfig *ClustermanifestClusterapiByohConfig `json:"byoh-config,omitempty"`

	// cert manager
	CertManager *ClustermanifestClusterapiCertManager `json:"cert-manager,omitempty"`

	// configs
	Configs []*ClustermanifestClusterapiConfigsItems0 `json:"configs"`

	// runtime
	// Enum: [containerd crio]
	Runtime string `json:"runtime,omitempty"`
}

func (m *ClustermanifestClusterapi) UnmarshalJSON(b []byte) error {
	type ClustermanifestClusterapiAlias ClustermanifestClusterapi
	var t ClustermanifestClusterapiAlias
	if err := json.Unmarshal([]byte("{\"cri\":\"containerd\"}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = ClustermanifestClusterapi(t)
	return nil
}

// Validate validates this clustermanifest clusterapi
func (m *ClustermanifestClusterapi) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateByohConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertManager(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterapi) validateByohConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ByohConfig) { // not required
		return nil
	}

	if m.ByohConfig != nil {
		if err := m.ByohConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterapi" + "." + "byoh-config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterapi" + "." + "byoh-config")
			}
			return err
		}
	}

	return nil
}

func (m *ClustermanifestClusterapi) validateCertManager(formats strfmt.Registry) error {
	if swag.IsZero(m.CertManager) { // not required
		return nil
	}

	if m.CertManager != nil {
		if err := m.CertManager.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterapi" + "." + "cert-manager")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterapi" + "." + "cert-manager")
			}
			return err
		}
	}

	return nil
}

func (m *ClustermanifestClusterapi) validateConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.Configs) { // not required
		return nil
	}

	for i := 0; i < len(m.Configs); i++ {
		if swag.IsZero(m.Configs[i]) { // not required
			continue
		}

		if m.Configs[i] != nil {
			if err := m.Configs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterapi" + "." + "configs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterapi" + "." + "configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var clustermanifestClusterapiTypeRuntimePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["containerd","crio"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clustermanifestClusterapiTypeRuntimePropEnum = append(clustermanifestClusterapiTypeRuntimePropEnum, v)
	}
}

const (

	// ClustermanifestClusterapiRuntimeContainerd captures enum value "containerd"
	ClustermanifestClusterapiRuntimeContainerd string = "containerd"

	// ClustermanifestClusterapiRuntimeCrio captures enum value "crio"
	ClustermanifestClusterapiRuntimeCrio string = "crio"
)

// prop value enum
func (m *ClustermanifestClusterapi) validateRuntimeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clustermanifestClusterapiTypeRuntimePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClustermanifestClusterapi) validateRuntime(formats strfmt.Registry) error {
	if swag.IsZero(m.Runtime) { // not required
		return nil
	}

	// value enum
	if err := m.validateRuntimeEnum("clusterapi"+"."+"runtime", "body", m.Runtime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this clustermanifest clusterapi based on the context it is used
func (m *ClustermanifestClusterapi) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateByohConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertManager(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterapi) contextValidateByohConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ByohConfig != nil {
		if err := m.ByohConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterapi" + "." + "byoh-config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterapi" + "." + "byoh-config")
			}
			return err
		}
	}

	return nil
}

func (m *ClustermanifestClusterapi) contextValidateCertManager(ctx context.Context, formats strfmt.Registry) error {

	if m.CertManager != nil {
		if err := m.CertManager.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterapi" + "." + "cert-manager")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterapi" + "." + "cert-manager")
			}
			return err
		}
	}

	return nil
}

func (m *ClustermanifestClusterapi) contextValidateConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Configs); i++ {

		if m.Configs[i] != nil {
			if err := m.Configs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterapi" + "." + "configs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterapi" + "." + "configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClustermanifestClusterapi) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustermanifestClusterapi) UnmarshalBinary(b []byte) error {
	var res ClustermanifestClusterapi
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClustermanifestClusterapiByohConfig clustermanifest clusterapi byoh config
//
// swagger:model ClustermanifestClusterapiByohConfig
type ClustermanifestClusterapiByohConfig struct {

	// bundle image
	BundleImage string `json:"bundle_image,omitempty"`

	// bundle registry
	BundleRegistry string `json:"bundle_registry,omitempty"`

	// download bin url
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	DownloadBinURL string `json:"download_bin_url,omitempty"`

	// host agent bin url
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	HostAgentBinURL string `json:"host_agent_bin_url,omitempty"`
}

// Validate validates this clustermanifest clusterapi byoh config
func (m *ClustermanifestClusterapiByohConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownloadBinURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostAgentBinURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterapiByohConfig) validateDownloadBinURL(formats strfmt.Registry) error {
	if swag.IsZero(m.DownloadBinURL) { // not required
		return nil
	}

	if err := validate.Pattern("clusterapi"+"."+"byoh-config"+"."+"download_bin_url", "body", m.DownloadBinURL, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *ClustermanifestClusterapiByohConfig) validateHostAgentBinURL(formats strfmt.Registry) error {
	if swag.IsZero(m.HostAgentBinURL) { // not required
		return nil
	}

	if err := validate.Pattern("clusterapi"+"."+"byoh-config"+"."+"host_agent_bin_url", "body", m.HostAgentBinURL, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this clustermanifest clusterapi byoh config based on context it is used
func (m *ClustermanifestClusterapiByohConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClustermanifestClusterapiByohConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustermanifestClusterapiByohConfig) UnmarshalBinary(b []byte) error {
	var res ClustermanifestClusterapiByohConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClustermanifestClusterapiCertManager clustermanifest clusterapi cert manager
//
// swagger:model ClustermanifestClusterapiCertManager
type ClustermanifestClusterapiCertManager struct {

	// url
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	URL string `json:"url,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this clustermanifest clusterapi cert manager
func (m *ClustermanifestClusterapiCertManager) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterapiCertManager) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.Pattern("clusterapi"+"."+"cert-manager"+"."+"url", "body", m.URL, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this clustermanifest clusterapi cert manager based on context it is used
func (m *ClustermanifestClusterapiCertManager) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClustermanifestClusterapiCertManager) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustermanifestClusterapiCertManager) UnmarshalBinary(b []byte) error {
	var res ClustermanifestClusterapiCertManager
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClustermanifestClusterapiConfigsItems0 clustermanifest clusterapi configs items0
//
// swagger:model ClustermanifestClusterapiConfigsItems0
type ClustermanifestClusterapiConfigsItems0 struct {

	// bin url
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	BinURL string `json:"bin_url,omitempty"`

	// images
	Images []string `json:"images"`

	// name
	Name string `json:"name,omitempty"`

	// providers
	Providers Provider `json:"providers,omitempty"`

	// runtime bins
	RuntimeBins []*ClustermanifestClusterapiConfigsItems0RuntimeBinsItems0 `json:"runtime_bins"`
}

// Validate validates this clustermanifest clusterapi configs items0
func (m *ClustermanifestClusterapiConfigsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBinURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntimeBins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterapiConfigsItems0) validateBinURL(formats strfmt.Registry) error {
	if swag.IsZero(m.BinURL) { // not required
		return nil
	}

	if err := validate.Pattern("bin_url", "body", m.BinURL, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *ClustermanifestClusterapiConfigsItems0) validateImages(formats strfmt.Registry) error {
	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {

		if err := validate.Pattern("images"+"."+strconv.Itoa(i), "body", m.Images[i], `^[a-zA-Z0-9][a-zA-Z_.\-/:@0-9]*[a-zA-Z0-9]$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *ClustermanifestClusterapiConfigsItems0) validateProviders(formats strfmt.Registry) error {
	if swag.IsZero(m.Providers) { // not required
		return nil
	}

	if err := m.Providers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("providers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("providers")
		}
		return err
	}

	return nil
}

func (m *ClustermanifestClusterapiConfigsItems0) validateRuntimeBins(formats strfmt.Registry) error {
	if swag.IsZero(m.RuntimeBins) { // not required
		return nil
	}

	for i := 0; i < len(m.RuntimeBins); i++ {
		if swag.IsZero(m.RuntimeBins[i]) { // not required
			continue
		}

		if m.RuntimeBins[i] != nil {
			if err := m.RuntimeBins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runtime_bins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runtime_bins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this clustermanifest clusterapi configs items0 based on the context it is used
func (m *ClustermanifestClusterapiConfigsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuntimeBins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterapiConfigsItems0) contextValidateProviders(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Providers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("providers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("providers")
		}
		return err
	}

	return nil
}

func (m *ClustermanifestClusterapiConfigsItems0) contextValidateRuntimeBins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RuntimeBins); i++ {

		if m.RuntimeBins[i] != nil {
			if err := m.RuntimeBins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runtime_bins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("runtime_bins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClustermanifestClusterapiConfigsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustermanifestClusterapiConfigsItems0) UnmarshalBinary(b []byte) error {
	var res ClustermanifestClusterapiConfigsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ClustermanifestClusterapiConfigsItems0RuntimeBinsItems0 clustermanifest clusterapi configs items0 runtime bins items0
//
// swagger:model ClustermanifestClusterapiConfigsItems0RuntimeBinsItems0
type ClustermanifestClusterapiConfigsItems0RuntimeBinsItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// url
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	URL string `json:"url,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this clustermanifest clusterapi configs items0 runtime bins items0
func (m *ClustermanifestClusterapiConfigsItems0RuntimeBinsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClustermanifestClusterapiConfigsItems0RuntimeBinsItems0) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.Pattern("url", "body", m.URL, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this clustermanifest clusterapi configs items0 runtime bins items0 based on context it is used
func (m *ClustermanifestClusterapiConfigsItems0RuntimeBinsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClustermanifestClusterapiConfigsItems0RuntimeBinsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClustermanifestClusterapiConfigsItems0RuntimeBinsItems0) UnmarshalBinary(b []byte) error {
	var res ClustermanifestClusterapiConfigsItems0RuntimeBinsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
