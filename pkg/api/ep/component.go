// Code generated by go-swagger; DO NOT EDIT.

//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

package ep

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Component component
//
// swagger:model component
type Component struct {

	// chartname
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Chartname string `json:"chartname,omitempty"`

	// chartoverride
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	Chartoverride string `json:"chartoverride,omitempty"`

	// chartversion
	Chartversion string `json:"chartversion,omitempty"`

	// executor
	Executor *ComponentExecutor `json:"executor,omitempty"`

	// hash
	Hash string `json:"hash,omitempty"`

	// hashtype
	// Enum: [sha256]
	Hashtype string `json:"hashtype,omitempty"`

	// helmrepo
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	Helmrepo string `json:"helmrepo,omitempty"`

	// images
	Images []string `json:"images"`

	// name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Name string `json:"name,omitempty"`

	// namespace
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Namespace string `json:"namespace,omitempty"`

	// resources
	Resources []*ComponentResourcesItems0 `json:"resources"`

	// revision
	Revision string `json:"revision,omitempty"`

	// supported clusters
	SupportedClusters []string `json:"supported-clusters"`

	// type
	// Enum: [yaml helm repo dce]
	Type string `json:"type,omitempty"`

	// url
	// Pattern: (?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])
	URL string `json:"url,omitempty"`

	// wait
	Wait *ComponentWait `json:"wait,omitempty"`
}

// Validate validates this component
func (m *Component) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChartname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChartoverride(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHashtype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelmrepo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWait(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Component) validateChartname(formats strfmt.Registry) error {
	if swag.IsZero(m.Chartname) { // not required
		return nil
	}

	if err := validate.Pattern("chartname", "body", m.Chartname, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateChartoverride(formats strfmt.Registry) error {
	if swag.IsZero(m.Chartoverride) { // not required
		return nil
	}

	if err := validate.Pattern("chartoverride", "body", m.Chartoverride, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateExecutor(formats strfmt.Registry) error {
	if swag.IsZero(m.Executor) { // not required
		return nil
	}

	if m.Executor != nil {
		if err := m.Executor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("executor")
			}
			return err
		}
	}

	return nil
}

var componentTypeHashtypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		componentTypeHashtypePropEnum = append(componentTypeHashtypePropEnum, v)
	}
}

const (

	// ComponentHashtypeSha256 captures enum value "sha256"
	ComponentHashtypeSha256 string = "sha256"
)

// prop value enum
func (m *Component) validateHashtypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, componentTypeHashtypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Component) validateHashtype(formats strfmt.Registry) error {
	if swag.IsZero(m.Hashtype) { // not required
		return nil
	}

	// value enum
	if err := m.validateHashtypeEnum("hashtype", "body", m.Hashtype); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateHelmrepo(formats strfmt.Registry) error {
	if swag.IsZero(m.Helmrepo) { // not required
		return nil
	}

	if err := validate.Pattern("helmrepo", "body", m.Helmrepo, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateImages(formats strfmt.Registry) error {
	if swag.IsZero(m.Images) { // not required
		return nil
	}

	for i := 0; i < len(m.Images); i++ {

		if err := validate.Pattern("images"+"."+strconv.Itoa(i), "body", m.Images[i], `^[a-zA-Z0-9][a-zA-Z_.\-/:@0-9]*[a-zA-Z0-9]$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *Component) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateNamespace(formats strfmt.Registry) error {
	if swag.IsZero(m.Namespace) { // not required
		return nil
	}

	if err := validate.Pattern("namespace", "body", m.Namespace, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var componentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yaml","helm","repo","dce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		componentTypeTypePropEnum = append(componentTypeTypePropEnum, v)
	}
}

const (

	// ComponentTypeYaml captures enum value "yaml"
	ComponentTypeYaml string = "yaml"

	// ComponentTypeHelm captures enum value "helm"
	ComponentTypeHelm string = "helm"

	// ComponentTypeRepo captures enum value "repo"
	ComponentTypeRepo string = "repo"

	// ComponentTypeDce captures enum value "dce"
	ComponentTypeDce string = "dce"
)

// prop value enum
func (m *Component) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, componentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Component) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.Pattern("url", "body", m.URL, `(?:(?:https?|http|ftp|file|oci)://|www.|ftp.)(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:([-A-Z0-9+&@#/%=~_|$?!:,.]*)|[A-Z0-9+&@#/%=~_|$])`); err != nil {
		return err
	}

	return nil
}

func (m *Component) validateWait(formats strfmt.Registry) error {
	if swag.IsZero(m.Wait) { // not required
		return nil
	}

	if m.Wait != nil {
		if err := m.Wait.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wait")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wait")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this component based on the context it is used
func (m *Component) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExecutor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWait(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Component) contextValidateExecutor(ctx context.Context, formats strfmt.Registry) error {

	if m.Executor != nil {
		if err := m.Executor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("executor")
			}
			return err
		}
	}

	return nil
}

func (m *Component) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {
			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Component) contextValidateWait(ctx context.Context, formats strfmt.Registry) error {

	if m.Wait != nil {
		if err := m.Wait.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wait")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("wait")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Component) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Component) UnmarshalBinary(b []byte) error {
	var res Component
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComponentExecutor component executor
//
// swagger:model ComponentExecutor
type ComponentExecutor struct {

	// build
	Build string `json:"build,omitempty"`

	// deploy
	Deploy string `json:"deploy,omitempty"`
}

// Validate validates this component executor
func (m *ComponentExecutor) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this component executor based on context it is used
func (m *ComponentExecutor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComponentExecutor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComponentExecutor) UnmarshalBinary(b []byte) error {
	var res ComponentExecutor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComponentResourcesItems0 component resources items0
//
// swagger:model ComponentResourcesItems0
type ComponentResourcesItems0 struct {

	// name
	// Pattern: ^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$
	Name string `json:"name,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this component resources items0
func (m *ComponentResourcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComponentResourcesItems0) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", m.Name, `^[a-zA-Z_$][a-zA-Z_.\-$0-9]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this component resources items0 based on context it is used
func (m *ComponentResourcesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComponentResourcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComponentResourcesItems0) UnmarshalBinary(b []byte) error {
	var res ComponentResourcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ComponentWait component wait
//
// swagger:model ComponentWait
type ComponentWait struct {

	// timeout
	Timeout int64 `json:"timeout,omitempty"`
}

// Validate validates this component wait
func (m *ComponentWait) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this component wait based on context it is used
func (m *ComponentWait) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComponentWait) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComponentWait) UnmarshalBinary(b []byte) error {
	var res ComponentWait
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
