//
//   Copyright (c) 2022 Intel Corporation.
//
//   SPDX-License-Identifier: Apache-2.0
//
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ep/pkg/executor (interfaces: ExecutorWrapper)

// Package mock is a generated GoMock package.
package mock

import (
	plugins "ep/pkg/api/plugins"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExecutorWrapper is a mock of ExecutorWrapper interface.
type MockExecutorWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorWrapperMockRecorder
}

// MockExecutorWrapperMockRecorder is the mock recorder for MockExecutorWrapper.
type MockExecutorWrapperMockRecorder struct {
	mock *MockExecutorWrapper
}

// NewMockExecutorWrapper creates a new mock instance.
func NewMockExecutorWrapper(ctrl *gomock.Controller) *MockExecutorWrapper {
	mock := &MockExecutorWrapper{ctrl: ctrl}
	mock.recorder = &MockExecutorWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutorWrapper) EXPECT() *MockExecutorWrapperMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockExecutorWrapper) Run(arg0 string, arg1 *plugins.EpParams, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockExecutorWrapperMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockExecutorWrapper)(nil).Run), arg0, arg1, arg2)
}

// SimpleShell mocks base method.
func (m *MockExecutorWrapper) SimpleShell(arg0 *plugins.ExecSimpleShell, arg1 *plugins.EpParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimpleShell", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SimpleShell indicates an expected call of SimpleShell.
func (mr *MockExecutorWrapperMockRecorder) SimpleShell(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimpleShell", reflect.TypeOf((*MockExecutorWrapper)(nil).SimpleShell), arg0, arg1)
}
